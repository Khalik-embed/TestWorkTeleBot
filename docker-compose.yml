version: '3.12'

services:
  nginx:
    container_name: nginx
    build: ./nginx
    restart: always
    volumes:
      - static:/static
    ports:
      - "80:80"
    networks:
      - backend
    depends_on:
      - bot_admin

  tele_bot:
    image: python:3.12
    container_name: tele_bot
    build: .
    command: python bot/echo.py
    volumes:
      - .:/app
    networks:
      - backend
    # ports:
    #   - "8000:8000"
    env_file:
      - .env

  database:
    image: postgres:16.2
    container_name: database
    environment:
      POSTGRES_DB: "database"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgresql337290entr"
      POSTGRES_PORT: 5432
      PGDATA: "/var/lib/postgresql/data/pgdata"
    networks:
      - backend
    ports:
      - "5432:5432"
    volumes:
      - data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d database"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G

  bot_admin:
    image: python:3.12
    container_name: bot_admin
    build: .
    #command: bash -c "python manage.py collectstatic --noinp&ut && python manage.py migrate  && gunicorn -b 0.0.0.0:8000 bot_admin.wsgi:application"
    command: bash -c "cd bot_admin && python manage.py collectstatic --noinput && python manage.py migrate  && gunicorn -b 0.0.0.0:8000 bot_admin.wsgi:application"
    restart: always
    ports:
      - "8000:8000"
    environment:
      - DB_HOST=database
    env_file:
      - .env
    volumes:
      - .:/app
      - static:/static
    networks:
      - backend
    depends_on:
      database:
        condition: service_healthy

volumes:
  data:
  static:

networks:
  backend:
    driver: bridge

    # env_file:
    #   - .env
    # healthcheck:
    #   test: ["CMD-SHELL", "pg_isready -U postgres"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
    # networks:
    #   - backend

#     #command: bash -c "python manage.py collectstatic --noinput && python manage.py migrate  && gunicorn -b 0.0.0.0:8000 bot_admin.wsgi:application"
#     #command: python bot_admin/manage.py migrate && python bot_admin/manage.py runserver 0.0.0.0:8000
#     ports:
#       - "8001:8001"
#     environment:
#       - DB_HOST=db
#     env_file:
#       - .env
#     volumes:
#       - .:/app
#     # networks:
#     #   - backend
#     depends_on:
#       db:
#         condition: service_healthy

# services:

# # networks:
# #   backend: